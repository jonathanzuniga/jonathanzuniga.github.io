/**
 * Syntax highlighting styles
 */
.highlight {
    [data-lang="html"],
    [data-lang="xml"] {
        font-weight: bold;
    }

    .c {
        color: $syntax-comment;
        font-style: italic;
        font-weight: bold;
    } // Comment
    .err {
        color: $syntax-error;
    } // Error
    .k {
        color: $syntax-str;
        font-weight: bold;
    } // Keyword
    .o {
        color: $syntax-str;
        font-weight: bold;
    } // Operator
    .cm {
        color: $syntax-comment;
        font-weight: bold;
    } // Comment.Multiline
    .cp {
        color: $syntax-comment;
        font-weight: bold;
    } // Comment.Preproc
    .c1 {
        color: $syntax-comment;
        font-weight: bold;
    } // Comment.Single
    .cs {
        color: $syntax-comment;
        font-weight: bold;
        font-style: italic;
    } // Comment.Special
    .gd {
        color: $syntax-del;
    } // Generic.Deleted
    .gd .x {
        color: $syntax-del;
    } // Generic.Deleted.Specific
    .ge {
        font-style: italic;
    } // Generic.Emph
    .gr {
        color: $syntax-error;
    } // Generic.Error
    .gh {
        color: $syntax-comment;
    } // Generic.Heading
    .gi {
        color: $syntax-txt;
    } // Generic.Inserted
    .gi .x {
        color: $syntax-txt;
    } // Generic.Inserted.Specific
    .go {
        color: $syntax-txt;
    } // Generic.Output
    .gp {
        color: $syntax-txt;
    } // Generic.Prompt
    .gs {
        font-weight: bold;
    } // Generic.Strong
    .gu {
        color: $syntax-txt;
    } // Generic.Subheading
    .gt {
        color: $syntax-prop;
    } // Generic.Traceback
    .kc {
        font-weight: bold;
    } // Keyword.Constant
    .kd {
        font-weight: bold;
    } // Keyword.Declaration
    .kp {
        font-weight: bold;
    } // Keyword.Pseudo
    .kr {
        font-weight: bold;
    } // Keyword.Reserved
    .kt {
        color: $syntax-str;
        font-weight: bold;
    } // Keyword.Type
    .m {
        color: $syntax-bool;
    } // Literal.Number
    .s {
        color: $syntax-val;
    } // Literal.String
    .na {
        color: $syntax-name;
    } // Name.Attribute
    .nb {
        color: $syntax-name;
    } // Name.Builtin
    .nc {
        color: $syntax-str;
        font-weight: bold;
    } // Name.Class
    .no {
        color: $syntax-name;
    } // Name.Constant
    .ni {
        color: $syntax-name;
    } // Name.Entity
    .ne {
        color: $syntax-fn;
        font-weight: bold;
    } // Name.Exception
    .nf {
        color: $syntax-fn;
        font-weight: bold;
    } // Name.Function
    .nn {
        color: $syntax-txt;
    } // Name.Namespace
    .nt {
        color: $syntax-prop;
    } // Name.Tag
    .nv {
        color: $syntax-name;
    } // Name.Variable
    .ow {
        font-weight: bold;
    } // Operator.Word
    .w {
        color: $syntax-comment;
    } // Text.Whitespace
    .mf {
        color: $syntax-bool;
    } // Literal.Number.Float
    .mh {
        color: $syntax-bool;
    } // Literal.Number.Hex
    .mi {
        color: $syntax-bool;
    } // Literal.Number.Integer
    .mo {
        color: $syntax-bool;
    } // Literal.Number.Oct
    .sb {
        color: $syntax-val;
    } // Literal.String.Backtick
    .sc {
        color: $syntax-val;
    } // Literal.String.Char
    .sd {
        color: $syntax-val;
    } // Literal.String.Doc
    .s2 {
        color: $syntax-val;
    } // Literal.String.Double
    .se {
        color: $syntax-val;
    } // Literal.String.Escape
    .sh {
        color: $syntax-val;
    } // Literal.String.Heredoc
    .si {
        color: $syntax-prop;
    } // Literal.String.Interpol
    .sx {
        color: $syntax-val;
    } // Literal.String.Other
    .sr {
        color: $syntax-regex;
    } // Literal.String.Regex
    .s1 {
        color: $syntax-val;
    } // Literal.String.Single
    .ss {
        color: $syntax-str;
    } // Literal.String.Symbol
    .bp {
        color: $syntax-comment;
    } // Name.Builtin.Pseudo
    .vc {
        color: $syntax-name;
    } // Name.Variable.Class
    .vg {
        color: $syntax-name;
    } // Name.Variable.Global
    .vi {
        color: $syntax-name;
    } // Name.Variable.Instance
    .il {
        color: $syntax-bool;
    } // Literal.Number.Integer.Long
}
